"use client";

import React, { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { ArrowLeft } from "lucide-react";
import { bloodDonationRegisDetail } from "@/services/bloodDonationRegis";
import { format } from "date-fns";
import clsx from "clsx";

// Tr·∫°ng th√°i ƒëƒÉng k√Ω hi·∫øn m√°u
export const BLOOD_DONATION_REGISTRATION_STATUS = {
  PENDING_APPROVAL: "pending_approval",
  REJECTED_REGISTRATION: "rejected_registration",
  REGISTERED: "registered",
  CHECKED_IN: "checked_in",
  IN_CONSULT: "in_consult",
  REJECTED: "rejected",
  WAITING_DONATION: "waiting_donation",
  DONATING: "donating",
  DONATED: "donated",
  RESTING: "resting",
  POST_REST_CHECK: "post_rest_check",
  COMPLETED: "completed",
  CANCELLED: "cancelled",
} as const;

// B·∫£n d·ªãch ti·∫øng Vi·ªát cho tr·∫°ng th√°i
const BLOOD_DONATION_REGISTRATION_STATUS_VI: Record<string, string> = {
  pending_approval: "Ch·ªù duy·ªát",
  rejected_registration: "T·ª´ ch·ªëi ƒëƒÉng k√Ω",
  registered: "ƒê√£ ƒëƒÉng k√Ω",
  checked_in: "ƒê√£ ƒëi·ªÉm danh",
  in_consult: "ƒêang t∆∞ v·∫•n",
  rejected: "B·ªã t·ª´ ch·ªëi",
  waiting_donation: "Ch·ªù hi·∫øn m√°u",
  donating: "ƒêang hi·∫øn m√°u",
  donated: "ƒê√£ hi·∫øn m√°u",
  resting: "ƒêang ngh·ªâ ng∆°i",
  post_rest_check: "Ki·ªÉm tra sau ngh·ªâ",
  completed: "Ho√†n t·∫•t",
  cancelled: "ƒê√£ h·ªßy",
};

// H√†m d·ªãch tr·∫°ng th√°i sang ti·∫øng Vi·ªát
const translateStatus = (status: string): string => {
  return BLOOD_DONATION_REGISTRATION_STATUS_VI[status?.toLowerCase()] || "Kh√¥ng x√°c ƒë·ªãnh";
};

// M√†u s·∫Øc cho tr·∫°ng th√°i (b·∫°n c√≥ th·ªÉ ch·ªânh l·∫°i n·∫øu mu·ªën)
const getStatusStyle = (status: string) => {
  const map: Record<string, string> = {
    pending_approval: "bg-yellow-100 text-yellow-800",
    rejected_registration: "bg-red-100 text-red-800",
    registered: "bg-blue-100 text-blue-800",
    checked_in: "bg-blue-200 text-blue-900",
    in_consult: "bg-indigo-100 text-indigo-800",
    rejected: "bg-red-200 text-red-900",
    waiting_donation: "bg-purple-100 text-purple-800",
    donating: "bg-pink-100 text-pink-800",
    donated: "bg-green-100 text-green-800",
    resting: "bg-teal-100 text-teal-800",
    post_rest_check: "bg-cyan-100 text-cyan-800",
    completed: "bg-indigo-100 text-indigo-800",
    cancelled: "bg-gray-100 text-gray-800",
  };
  return map[status?.toLowerCase()] || "bg-gray-100 text-gray-800";
};

export default function RequestDetail() {
  const { id } = useParams();
  const navigate = useNavigate();
  const [request, setRequest] = useState<any>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchDetail = async () => {
      try {
        const data = await bloodDonationRegisDetail(id);
        setRequest(data);
      } catch (err) {
        console.error("L·ªói khi l·∫•y chi ti·∫øt:", err);
      } finally {
        setLoading(false);
      }
    };

    fetchDetail();
  }, [id]);

  const handleGoBack = () => {
    navigate(-1); // quay l·∫°i trang tr∆∞·ªõc
  };

  if (loading)
    return <div className="p-6 text-center text-muted-foreground">ƒêang t·∫£i d·ªØ li·ªáu...</div>;
  if (!request)
    return <div className="p-6 text-center text-red-600">Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu</div>;

  const infoList = [
    { label: "M√£ y√™u c·∫ßu", value: request.code },
    {
      label: "Ng∆∞·ªùi y√™u c·∫ßu",
      value: `${request.userId?.fullName || "N/A"} (${request.userId?.email || "N/A"})`,
    },
    { label: "S·ªë ƒëi·ªán tho·∫°i", value: request.userId?.phone || "N/A" },
    { label: "Nh√≥m m√°u", value: request.bloodGroupId?.name || "N/A" },
    { label: "S·ªë l∆∞·ª£ng y√™u c·∫ßu", value: `${request.expectedQuantity} ml` },
    { label: "Ng√†y y√™u c·∫ßu", value: format(new Date(request.createdAt), "dd/MM/yyyy HH:mm") },
    { label: "Ng√†y mong mu·ªën", value: format(new Date(request.preferredDate), "dd/MM/yyyy HH:mm") },
    ...(request.completedAt
      ? [{ label: "Ng√†y ho√†n th√†nh", value: format(new Date(request.completedAt), "dd/MM/yyyy HH:mm") }]
      : []),
    { label: "B·ªánh vi·ªán", value: request.facilityId?.name || "N/A" },
    { label: "Nh√¢n vi√™n x·ª≠ l√Ω", value: request.staffId?.userId?.fullName || "Ch∆∞a ph√¢n c√¥ng" },
    { label: "Ghi ch√∫", value: request.notes || "Kh√¥ng c√≥" },
    {
      label: "Tr·∫°ng th√°i",
      value: (
        <Badge className={clsx("capitalize", getStatusStyle(request.status))}>
          {translateStatus(request.status)}
        </Badge>
      ),
    },
  ];

  return (
    <div className="p-6 max-w-4xl mx-auto space-y-6">
      <div className="flex items-center gap-4">
        <Button variant="outline" onClick={handleGoBack} className="flex items-center gap-2 hover:bg-gray-50">
          <ArrowLeft className="w-4 h-4" />
          Quay l·∫°i
        </Button>
        <div className="h-6 w-px bg-gray-300" />
      </div>

      <Card className="shadow-lg border">
        <CardHeader>
          <CardTitle className="text-2xl font-semibold text-primary">
            ü©∏ Chi ti·∫øt y√™u c·∫ßu hi·∫øn m√°u
          </CardTitle>
        </CardHeader>
        <CardContent className="text-sm md:text-base">
          {infoList.map((item, index) => (
            <InfoRow
              key={index}
              label={item.label}
              value={item.value}
              isLast={index === infoList.length - 1}
            />
          ))}

          {request.qrCodeUrl && (
            <div>
              <strong className="block mb-2">M√£ QR:</strong>
              <img
                src={request.qrCodeUrl || "/placeholder.svg"}
                alt="QR Code"
                className="w-44 h-44 border rounded shadow-md"
              />
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}

const InfoRow = ({
  label,
  value,
  isLast,
}: {
  label: string;
  value: string | React.ReactNode;
  isLast?: boolean;
}) => (
  <div className={clsx("flex items-start gap-2", !isLast && "border-b pb-3 mb-3")}>
    <strong className="min-w-[150px]">{label}:</strong>
    <span className="text-muted-foreground">{value}</span>
  </div>
);
